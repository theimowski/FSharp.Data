[<[TypeProviderEditorHideMethods()]>]
class HtmlProvider : FDR.BaseTypes.HtmlDocument
    new : () -> HtmlProvider
    HtmlDocument.Create(false, FSharpAsync.RunSynchronously((IO.asyncReadTextAtRuntimeWithDesignTimeRules @"<RESOLUTION_FOLDER>" "" "HTML" "" "SimpleHtmlLists.html")))

    static member AsyncGetSample: () -> HtmlProvider async
    let f = new Func<_,_>(fun (t:TextReader) -> HtmlDocument.Create(false, t))
    TextRuntime.AsyncMap((IO.asyncReadTextAtRuntimeWithDesignTimeRules @"<RESOLUTION_FOLDER>" "" "HTML" "" "SimpleHtmlLists.html"), f)

    static member AsyncLoad: uri:string -> HtmlProvider async
    let f = new Func<_,_>(fun (t:TextReader) -> HtmlDocument.Create(false, t))
    TextRuntime.AsyncMap((IO.asyncReadTextAtRuntime false @"<RESOLUTION_FOLDER>" "" "HTML" "" uri), f)

    member DefinitionLists: HtmlProvider+DefinitionListsContainer with get
    this

    static member GetSample: () -> HtmlProvider
    HtmlDocument.Create(false, FSharpAsync.RunSynchronously((IO.asyncReadTextAtRuntimeWithDesignTimeRules @"<RESOLUTION_FOLDER>" "" "HTML" "" "SimpleHtmlLists.html")))

    member Lists: HtmlProvider+ListsContainer with get
    this

    static member Load: stream:System.IO.Stream -> HtmlProvider
    HtmlDocument.Create(false, ((new StreamReader(stream)) :> TextReader))

    static member Load: reader:System.IO.TextReader -> HtmlProvider
    HtmlDocument.Create(false, reader)

    static member Load: uri:string -> HtmlProvider
    HtmlDocument.Create(false, FSharpAsync.RunSynchronously((IO.asyncReadTextAtRuntime false @"<RESOLUTION_FOLDER>" "" "HTML" "" uri)))

    static member Parse: text:string -> HtmlProvider
    HtmlDocument.Create(false, ((new StringReader(text)) :> TextReader))


[<[TypeProviderEditorHideMethods()]>]
class HtmlProvider+DefinitionListsContainer : FDR.BaseTypes.HtmlDocument
    member MyDLLists: HtmlProvider+MyDlLists with get
    this


[<[TypeProviderEditorHideMethods()]>]
class HtmlProvider+ListsContainer : FDR.BaseTypes.HtmlDocument
    member SimpleCount: HtmlProvider+SimpleCount with get
    let rowConverter = new Func<_,_>(fun (row:string) -> 
                                        let value = TextConversions.AsString(row)
                                        TextRuntime.GetNonOptionalValue("", TextRuntime.ConvertInteger("", value), value))
    HtmlList<_>.Create(rowConverter, this, "simpleCount")


[<[TypeProviderEditorHideMethods()]>]
class HtmlProvider+MyDlLists : FDR.BaseTypes.HtmlDocument
    member Count: HtmlProvider+MyDlLists+Count with get
    let rowConverter = new Func<_,_>(fun (row:string) -> 
                                        let value = TextConversions.AsString(row)
                                        TextRuntime.GetNonOptionalValue("", TextRuntime.ConvertInteger("", value), value))
    HtmlList<_>.CreateNested(rowConverter, this, "myDLLists", 0)

    member Dates: HtmlProvider+MyDlLists+Dates with get
    let rowConverter = new Func<_,_>(fun (row:string) -> 
                                        let value = TextConversions.AsString(row)
                                        TextRuntime.GetNonOptionalValue("", TextRuntime.ConvertDateTime("", value), value))
    HtmlList<_>.CreateNested(rowConverter, this, "myDLLists", 1)

    member Decimals: HtmlProvider+MyDlLists+Decimals with get
    let rowConverter = new Func<_,_>(fun (row:string) -> 
                                        let value = TextConversions.AsString(row)
                                        TextRuntime.GetNonOptionalValue("", TextRuntime.ConvertDecimal("", value), value))
    HtmlList<_>.CreateNested(rowConverter, this, "myDLLists", 2)

    member Missing: HtmlProvider+MyDlLists+Missing with get
    let rowConverter = new Func<_,_>(fun (row:string) -> 
                                        let value = TextConversions.AsString(row)
                                        TextRuntime.GetNonOptionalValue("", TextRuntime.ConvertString(value), value))
    HtmlList<_>.CreateNested(rowConverter, this, "myDLLists", 3)


[<[TypeProviderEditorHideMethods()]>]
class HtmlProvider+SimpleCount : FDR.BaseTypes.HtmlList<int>

[<[TypeProviderEditorHideMethods()]>]
class HtmlProvider+MyDlLists+Count : FDR.BaseTypes.HtmlList<int>

[<[TypeProviderEditorHideMethods()]>]
class HtmlProvider+MyDlLists+Dates : FDR.BaseTypes.HtmlList<System.DateTime>

[<[TypeProviderEditorHideMethods()]>]
class HtmlProvider+MyDlLists+Decimals : FDR.BaseTypes.HtmlList<decimal>

[<[TypeProviderEditorHideMethods()]>]
class HtmlProvider+MyDlLists+Missing : FDR.BaseTypes.HtmlList<string>

